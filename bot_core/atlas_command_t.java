/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package bot_core;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class atlas_command_t implements lcm.lcm.LCMEncodable
{
    public long utime;
    public int num_joints;
    public String joint_names[];
    public double position[];
    public double velocity[];
    public double effort[];
    public double k_q_p[];
    public double k_q_i[];
    public double k_qd_p[];
    public double k_f_p[];
    public double ff_qd[];
    public double ff_qd_d[];
    public double ff_f_d[];
    public double ff_const[];
    public byte k_effort[];
    public byte desired_controller_period_ms;
 
    public atlas_command_t()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x1b307c611a471a89L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(bot_core.atlas_command_t.class))
            return 0L;
 
        classes.add(bot_core.atlas_command_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        char[] __strbuf = null;
        outs.writeLong(this.utime); 
 
        outs.writeInt(this.num_joints); 
 
        for (int a = 0; a < this.num_joints; a++) {
            __strbuf = new char[this.joint_names[a].length()]; this.joint_names[a].getChars(0, this.joint_names[a].length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
        }
 
        for (int a = 0; a < this.num_joints; a++) {
            outs.writeDouble(this.position[a]); 
        }
 
        for (int a = 0; a < this.num_joints; a++) {
            outs.writeDouble(this.velocity[a]); 
        }
 
        for (int a = 0; a < this.num_joints; a++) {
            outs.writeDouble(this.effort[a]); 
        }
 
        for (int a = 0; a < this.num_joints; a++) {
            outs.writeDouble(this.k_q_p[a]); 
        }
 
        for (int a = 0; a < this.num_joints; a++) {
            outs.writeDouble(this.k_q_i[a]); 
        }
 
        for (int a = 0; a < this.num_joints; a++) {
            outs.writeDouble(this.k_qd_p[a]); 
        }
 
        for (int a = 0; a < this.num_joints; a++) {
            outs.writeDouble(this.k_f_p[a]); 
        }
 
        for (int a = 0; a < this.num_joints; a++) {
            outs.writeDouble(this.ff_qd[a]); 
        }
 
        for (int a = 0; a < this.num_joints; a++) {
            outs.writeDouble(this.ff_qd_d[a]); 
        }
 
        for (int a = 0; a < this.num_joints; a++) {
            outs.writeDouble(this.ff_f_d[a]); 
        }
 
        for (int a = 0; a < this.num_joints; a++) {
            outs.writeDouble(this.ff_const[a]); 
        }
 
        if (this.num_joints > 0)
            outs.write(this.k_effort, 0, num_joints);
 
        outs.writeByte(this.desired_controller_period_ms); 
 
    }
 
    public atlas_command_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public atlas_command_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static bot_core.atlas_command_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        bot_core.atlas_command_t o = new bot_core.atlas_command_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        char[] __strbuf = null;
        this.utime = ins.readLong();
 
        this.num_joints = ins.readInt();
 
        this.joint_names = new String[(int) num_joints];
        for (int a = 0; a < this.num_joints; a++) {
            __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.joint_names[a] = new String(__strbuf);
        }
 
        this.position = new double[(int) num_joints];
        for (int a = 0; a < this.num_joints; a++) {
            this.position[a] = ins.readDouble();
        }
 
        this.velocity = new double[(int) num_joints];
        for (int a = 0; a < this.num_joints; a++) {
            this.velocity[a] = ins.readDouble();
        }
 
        this.effort = new double[(int) num_joints];
        for (int a = 0; a < this.num_joints; a++) {
            this.effort[a] = ins.readDouble();
        }
 
        this.k_q_p = new double[(int) num_joints];
        for (int a = 0; a < this.num_joints; a++) {
            this.k_q_p[a] = ins.readDouble();
        }
 
        this.k_q_i = new double[(int) num_joints];
        for (int a = 0; a < this.num_joints; a++) {
            this.k_q_i[a] = ins.readDouble();
        }
 
        this.k_qd_p = new double[(int) num_joints];
        for (int a = 0; a < this.num_joints; a++) {
            this.k_qd_p[a] = ins.readDouble();
        }
 
        this.k_f_p = new double[(int) num_joints];
        for (int a = 0; a < this.num_joints; a++) {
            this.k_f_p[a] = ins.readDouble();
        }
 
        this.ff_qd = new double[(int) num_joints];
        for (int a = 0; a < this.num_joints; a++) {
            this.ff_qd[a] = ins.readDouble();
        }
 
        this.ff_qd_d = new double[(int) num_joints];
        for (int a = 0; a < this.num_joints; a++) {
            this.ff_qd_d[a] = ins.readDouble();
        }
 
        this.ff_f_d = new double[(int) num_joints];
        for (int a = 0; a < this.num_joints; a++) {
            this.ff_f_d[a] = ins.readDouble();
        }
 
        this.ff_const = new double[(int) num_joints];
        for (int a = 0; a < this.num_joints; a++) {
            this.ff_const[a] = ins.readDouble();
        }
 
        this.k_effort = new byte[(int) num_joints];
        ins.readFully(this.k_effort, 0, num_joints); 
        this.desired_controller_period_ms = ins.readByte();
 
    }
 
    public bot_core.atlas_command_t copy()
    {
        bot_core.atlas_command_t outobj = new bot_core.atlas_command_t();
        outobj.utime = this.utime;
 
        outobj.num_joints = this.num_joints;
 
        outobj.joint_names = new String[(int) num_joints];
        if (this.num_joints > 0)
            System.arraycopy(this.joint_names, 0, outobj.joint_names, 0, this.num_joints); 
        outobj.position = new double[(int) num_joints];
        if (this.num_joints > 0)
            System.arraycopy(this.position, 0, outobj.position, 0, this.num_joints); 
        outobj.velocity = new double[(int) num_joints];
        if (this.num_joints > 0)
            System.arraycopy(this.velocity, 0, outobj.velocity, 0, this.num_joints); 
        outobj.effort = new double[(int) num_joints];
        if (this.num_joints > 0)
            System.arraycopy(this.effort, 0, outobj.effort, 0, this.num_joints); 
        outobj.k_q_p = new double[(int) num_joints];
        if (this.num_joints > 0)
            System.arraycopy(this.k_q_p, 0, outobj.k_q_p, 0, this.num_joints); 
        outobj.k_q_i = new double[(int) num_joints];
        if (this.num_joints > 0)
            System.arraycopy(this.k_q_i, 0, outobj.k_q_i, 0, this.num_joints); 
        outobj.k_qd_p = new double[(int) num_joints];
        if (this.num_joints > 0)
            System.arraycopy(this.k_qd_p, 0, outobj.k_qd_p, 0, this.num_joints); 
        outobj.k_f_p = new double[(int) num_joints];
        if (this.num_joints > 0)
            System.arraycopy(this.k_f_p, 0, outobj.k_f_p, 0, this.num_joints); 
        outobj.ff_qd = new double[(int) num_joints];
        if (this.num_joints > 0)
            System.arraycopy(this.ff_qd, 0, outobj.ff_qd, 0, this.num_joints); 
        outobj.ff_qd_d = new double[(int) num_joints];
        if (this.num_joints > 0)
            System.arraycopy(this.ff_qd_d, 0, outobj.ff_qd_d, 0, this.num_joints); 
        outobj.ff_f_d = new double[(int) num_joints];
        if (this.num_joints > 0)
            System.arraycopy(this.ff_f_d, 0, outobj.ff_f_d, 0, this.num_joints); 
        outobj.ff_const = new double[(int) num_joints];
        if (this.num_joints > 0)
            System.arraycopy(this.ff_const, 0, outobj.ff_const, 0, this.num_joints); 
        outobj.k_effort = new byte[(int) num_joints];
        if (this.num_joints > 0)
            System.arraycopy(this.k_effort, 0, outobj.k_effort, 0, this.num_joints); 
        outobj.desired_controller_period_ms = this.desired_controller_period_ms;
 
        return outobj;
    }
 
}

