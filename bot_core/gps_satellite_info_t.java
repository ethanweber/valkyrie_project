/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package bot_core;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class gps_satellite_info_t implements lcm.lcm.LCMEncodable
{
    public boolean used_for_nav;
    public boolean differential_correction_avail;
    public boolean orbit_info_avail;
    public boolean ephemeris;
    public boolean healthy;
    public short signal_quality;
    public short carrier_to_noise;
    public double azimuth;
    public double elevation;
 
    public gps_satellite_info_t()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x2ea0ffe63ed2d865L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(bot_core.gps_satellite_info_t.class))
            return 0L;
 
        classes.add(bot_core.gps_satellite_info_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeByte( this.used_for_nav ? 1 : 0); 
 
        outs.writeByte( this.differential_correction_avail ? 1 : 0); 
 
        outs.writeByte( this.orbit_info_avail ? 1 : 0); 
 
        outs.writeByte( this.ephemeris ? 1 : 0); 
 
        outs.writeByte( this.healthy ? 1 : 0); 
 
        outs.writeShort(this.signal_quality); 
 
        outs.writeShort(this.carrier_to_noise); 
 
        outs.writeDouble(this.azimuth); 
 
        outs.writeDouble(this.elevation); 
 
    }
 
    public gps_satellite_info_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public gps_satellite_info_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static bot_core.gps_satellite_info_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        bot_core.gps_satellite_info_t o = new bot_core.gps_satellite_info_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.used_for_nav = ins.readByte()!=0;
 
        this.differential_correction_avail = ins.readByte()!=0;
 
        this.orbit_info_avail = ins.readByte()!=0;
 
        this.ephemeris = ins.readByte()!=0;
 
        this.healthy = ins.readByte()!=0;
 
        this.signal_quality = ins.readShort();
 
        this.carrier_to_noise = ins.readShort();
 
        this.azimuth = ins.readDouble();
 
        this.elevation = ins.readDouble();
 
    }
 
    public bot_core.gps_satellite_info_t copy()
    {
        bot_core.gps_satellite_info_t outobj = new bot_core.gps_satellite_info_t();
        outobj.used_for_nav = this.used_for_nav;
 
        outobj.differential_correction_avail = this.differential_correction_avail;
 
        outobj.orbit_info_avail = this.orbit_info_avail;
 
        outobj.ephemeris = this.ephemeris;
 
        outobj.healthy = this.healthy;
 
        outobj.signal_quality = this.signal_quality;
 
        outobj.carrier_to_noise = this.carrier_to_noise;
 
        outobj.azimuth = this.azimuth;
 
        outobj.elevation = this.elevation;
 
        return outobj;
    }
 
}

