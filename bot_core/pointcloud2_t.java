/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package bot_core;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class pointcloud2_t implements lcm.lcm.LCMEncodable
{
    public long utime;
    public int seq;
    public String frame_id;
    public int height;
    public int width;
    public int nfields;
    public bot_core.pointfield_t fields[];
    public boolean is_bigendian;
    public int point_step;
    public int row_step;
    public int data_nbytes;
    public byte data[];
    public boolean is_dense;
 
    public pointcloud2_t()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x53989df001a1c638L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(bot_core.pointcloud2_t.class))
            return 0L;
 
        classes.add(bot_core.pointcloud2_t.class);
        long hash = LCM_FINGERPRINT_BASE
             + bot_core.pointfield_t._hashRecursive(classes)
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        char[] __strbuf = null;
        outs.writeLong(this.utime); 
 
        outs.writeInt(this.seq); 
 
        __strbuf = new char[this.frame_id.length()]; this.frame_id.getChars(0, this.frame_id.length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
 
        outs.writeInt(this.height); 
 
        outs.writeInt(this.width); 
 
        outs.writeInt(this.nfields); 
 
        for (int a = 0; a < this.nfields; a++) {
            this.fields[a]._encodeRecursive(outs); 
        }
 
        outs.writeByte( this.is_bigendian ? 1 : 0); 
 
        outs.writeInt(this.point_step); 
 
        outs.writeInt(this.row_step); 
 
        outs.writeInt(this.data_nbytes); 
 
        if (this.data_nbytes > 0)
            outs.write(this.data, 0, data_nbytes);
 
        outs.writeByte( this.is_dense ? 1 : 0); 
 
    }
 
    public pointcloud2_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public pointcloud2_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static bot_core.pointcloud2_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        bot_core.pointcloud2_t o = new bot_core.pointcloud2_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        char[] __strbuf = null;
        this.utime = ins.readLong();
 
        this.seq = ins.readInt();
 
        __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.frame_id = new String(__strbuf);
 
        this.height = ins.readInt();
 
        this.width = ins.readInt();
 
        this.nfields = ins.readInt();
 
        this.fields = new bot_core.pointfield_t[(int) nfields];
        for (int a = 0; a < this.nfields; a++) {
            this.fields[a] = bot_core.pointfield_t._decodeRecursiveFactory(ins);
        }
 
        this.is_bigendian = ins.readByte()!=0;
 
        this.point_step = ins.readInt();
 
        this.row_step = ins.readInt();
 
        this.data_nbytes = ins.readInt();
 
        this.data = new byte[(int) data_nbytes];
        ins.readFully(this.data, 0, data_nbytes); 
        this.is_dense = ins.readByte()!=0;
 
    }
 
    public bot_core.pointcloud2_t copy()
    {
        bot_core.pointcloud2_t outobj = new bot_core.pointcloud2_t();
        outobj.utime = this.utime;
 
        outobj.seq = this.seq;
 
        outobj.frame_id = this.frame_id;
 
        outobj.height = this.height;
 
        outobj.width = this.width;
 
        outobj.nfields = this.nfields;
 
        outobj.fields = new bot_core.pointfield_t[(int) nfields];
        for (int a = 0; a < this.nfields; a++) {
            outobj.fields[a] = this.fields[a].copy();
        }
 
        outobj.is_bigendian = this.is_bigendian;
 
        outobj.point_step = this.point_step;
 
        outobj.row_step = this.row_step;
 
        outobj.data_nbytes = this.data_nbytes;
 
        outobj.data = new byte[(int) data_nbytes];
        if (this.data_nbytes > 0)
            System.arraycopy(this.data, 0, outobj.data, 0, this.data_nbytes); 
        outobj.is_dense = this.is_dense;
 
        return outobj;
    }
 
}

