/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package bot_core;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class pointcloud_t implements lcm.lcm.LCMEncodable
{
    public long utime;
    public int seq;
    public String frame_id;
    public int n_points;
    public float points[][];
    public int n_channels;
    public String channel_names[];
    public float channels[][];
 
    public pointcloud_t()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x86c4ee3b7594a834L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(bot_core.pointcloud_t.class))
            return 0L;
 
        classes.add(bot_core.pointcloud_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        char[] __strbuf = null;
        outs.writeLong(this.utime); 
 
        outs.writeInt(this.seq); 
 
        __strbuf = new char[this.frame_id.length()]; this.frame_id.getChars(0, this.frame_id.length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
 
        outs.writeInt(this.n_points); 
 
        for (int a = 0; a < this.n_points; a++) {
            for (int b = 0; b < 3; b++) {
                outs.writeFloat(this.points[a][b]); 
            }
        }
 
        outs.writeInt(this.n_channels); 
 
        for (int a = 0; a < this.n_channels; a++) {
            __strbuf = new char[this.channel_names[a].length()]; this.channel_names[a].getChars(0, this.channel_names[a].length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
        }
 
        for (int a = 0; a < this.n_channels; a++) {
            for (int b = 0; b < this.n_points; b++) {
                outs.writeFloat(this.channels[a][b]); 
            }
        }
 
    }
 
    public pointcloud_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public pointcloud_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static bot_core.pointcloud_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        bot_core.pointcloud_t o = new bot_core.pointcloud_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        char[] __strbuf = null;
        this.utime = ins.readLong();
 
        this.seq = ins.readInt();
 
        __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.frame_id = new String(__strbuf);
 
        this.n_points = ins.readInt();
 
        this.points = new float[(int) n_points][(int) 3];
        for (int a = 0; a < this.n_points; a++) {
            for (int b = 0; b < 3; b++) {
                this.points[a][b] = ins.readFloat();
            }
        }
 
        this.n_channels = ins.readInt();
 
        this.channel_names = new String[(int) n_channels];
        for (int a = 0; a < this.n_channels; a++) {
            __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.channel_names[a] = new String(__strbuf);
        }
 
        this.channels = new float[(int) n_channels][(int) n_points];
        for (int a = 0; a < this.n_channels; a++) {
            for (int b = 0; b < this.n_points; b++) {
                this.channels[a][b] = ins.readFloat();
            }
        }
 
    }
 
    public bot_core.pointcloud_t copy()
    {
        bot_core.pointcloud_t outobj = new bot_core.pointcloud_t();
        outobj.utime = this.utime;
 
        outobj.seq = this.seq;
 
        outobj.frame_id = this.frame_id;
 
        outobj.n_points = this.n_points;
 
        outobj.points = new float[(int) n_points][(int) 3];
        for (int a = 0; a < this.n_points; a++) {
            System.arraycopy(this.points[a], 0, outobj.points[a], 0, 3);        }
 
        outobj.n_channels = this.n_channels;
 
        outobj.channel_names = new String[(int) n_channels];
        if (this.n_channels > 0)
            System.arraycopy(this.channel_names, 0, outobj.channel_names, 0, this.n_channels); 
        outobj.channels = new float[(int) n_channels][(int) n_points];
        for (int a = 0; a < this.n_channels; a++) {
            if (this.n_points > 0)
                System.arraycopy(this.channels[a], 0, outobj.channels[a], 0, this.n_points);        }
 
        return outobj;
    }
 
}

