/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package robotlocomotion;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class image_t implements lcm.lcm.LCMEncodable
{
    public robotlocomotion.header_t header;
    public int width;
    public int height;
    public int row_stride;
    public int size;
    public byte data[];
    public boolean bigendian;
    public byte pixel_format;
    public byte channel_type;
    public byte compression_method;
 
    public image_t()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xcc69e8044fc49594L;
 
    public static final byte PIXEL_FORMAT_GRAY = (byte) 0;
    public static final byte PIXEL_FORMAT_RGB = (byte) 1;
    public static final byte PIXEL_FORMAT_BGR = (byte) 2;
    public static final byte PIXEL_FORMAT_RGBA = (byte) 3;
    public static final byte PIXEL_FORMAT_BGRA = (byte) 4;
    public static final byte PIXEL_FORMAT_DEPTH = (byte) 5;
    public static final byte PIXEL_FORMAT_LABEL = (byte) 6;
    public static final byte PIXEL_FORMAT_MASK = (byte) 7;
    public static final byte PIXEL_FORMAT_DISPARITY = (byte) 8;
    public static final byte PIXEL_FORMAT_BAYER_BGGR = (byte) 9;
    public static final byte PIXEL_FORMAT_BAYER_RGGB = (byte) 10;
    public static final byte PIXEL_FORMAT_BAYER_GBRG = (byte) 11;
    public static final byte PIXEL_FORMAT_BAYER_GRBG = (byte) 12;
    public static final byte PIXEL_FORMAT_INVALID = (byte) -1;
    public static final byte CHANNEL_TYPE_INT8 = (byte) 0;
    public static final byte CHANNEL_TYPE_UINT8 = (byte) 1;
    public static final byte CHANNEL_TYPE_INT16 = (byte) 2;
    public static final byte CHANNEL_TYPE_UINT16 = (byte) 3;
    public static final byte CHANNEL_TYPE_INT32 = (byte) 4;
    public static final byte CHANNEL_TYPE_UINT32 = (byte) 5;
    public static final byte CHANNEL_TYPE_FLOAT32 = (byte) 6;
    public static final byte CHANNEL_TYPE_FLOAT64 = (byte) 7;
    public static final byte CHANNEL_TYPE_INVALID = (byte) -1;
    public static final byte COMPRESSION_METHOD_NOT_COMPRESSED = (byte) 0;
    public static final byte COMPRESSION_METHOD_ZLIB = (byte) 1;
    public static final byte COMPRESSION_METHOD_JPEG = (byte) 2;
    public static final byte COMPRESSION_METHOD_PNG = (byte) 3;
    public static final byte COMPRESSION_METHOD_INVALID = (byte) -1;

    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(robotlocomotion.image_t.class))
            return 0L;
 
        classes.add(robotlocomotion.image_t.class);
        long hash = LCM_FINGERPRINT_BASE
             + robotlocomotion.header_t._hashRecursive(classes)
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        this.header._encodeRecursive(outs); 
 
        outs.writeInt(this.width); 
 
        outs.writeInt(this.height); 
 
        outs.writeInt(this.row_stride); 
 
        outs.writeInt(this.size); 
 
        if (this.size > 0)
            outs.write(this.data, 0, size);
 
        outs.writeByte( this.bigendian ? 1 : 0); 
 
        outs.writeByte(this.pixel_format); 
 
        outs.writeByte(this.channel_type); 
 
        outs.writeByte(this.compression_method); 
 
    }
 
    public image_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public image_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static robotlocomotion.image_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        robotlocomotion.image_t o = new robotlocomotion.image_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.header = robotlocomotion.header_t._decodeRecursiveFactory(ins);
 
        this.width = ins.readInt();
 
        this.height = ins.readInt();
 
        this.row_stride = ins.readInt();
 
        this.size = ins.readInt();
 
        this.data = new byte[(int) size];
        ins.readFully(this.data, 0, size); 
        this.bigendian = ins.readByte()!=0;
 
        this.pixel_format = ins.readByte();
 
        this.channel_type = ins.readByte();
 
        this.compression_method = ins.readByte();
 
    }
 
    public robotlocomotion.image_t copy()
    {
        robotlocomotion.image_t outobj = new robotlocomotion.image_t();
        outobj.header = this.header.copy();
 
        outobj.width = this.width;
 
        outobj.height = this.height;
 
        outobj.row_stride = this.row_stride;
 
        outobj.size = this.size;
 
        outobj.data = new byte[(int) size];
        if (this.size > 0)
            System.arraycopy(this.data, 0, outobj.data, 0, this.size); 
        outobj.bigendian = this.bigendian;
 
        outobj.pixel_format = this.pixel_format;
 
        outobj.channel_type = this.channel_type;
 
        outobj.compression_method = this.compression_method;
 
        return outobj;
    }
 
}

