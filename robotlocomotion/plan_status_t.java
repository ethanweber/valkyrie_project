/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package robotlocomotion;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class plan_status_t implements lcm.lcm.LCMEncodable
{
    public long utime;
    public byte execution_status;
    public long last_plan_msg_utime;
    public long last_plan_start_utime;
    public byte plan_type;
    public boolean recovery_enabled;
    public boolean bracing_enabled;
 
    public plan_status_t()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xf946fe88ee1f80d4L;
 
    public static final byte EXECUTION_STATUS_EXECUTING = (byte) 0;
    public static final byte EXECUTION_STATUS_FINISHED = (byte) 1;
    public static final byte EXECUTION_STATUS_NO_PLAN = (byte) 2;
    public static final byte UNKNOWN = (byte) 0;
    public static final byte STANDING = (byte) 1;
    public static final byte WALKING = (byte) 2;
    public static final byte HARNESSED = (byte) 3;
    public static final byte QUASISTATIC = (byte) 4;
    public static final byte BRACING = (byte) 5;
    public static final byte CRAWLING = (byte) 6;
    public static final byte DUMMY = (byte) 7;
    public static final byte MANIPULATING = (byte) 8;
    public static final byte RECOVERING = (byte) 9;

    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(robotlocomotion.plan_status_t.class))
            return 0L;
 
        classes.add(robotlocomotion.plan_status_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeLong(this.utime); 
 
        outs.writeByte(this.execution_status); 
 
        outs.writeLong(this.last_plan_msg_utime); 
 
        outs.writeLong(this.last_plan_start_utime); 
 
        outs.writeByte(this.plan_type); 
 
        outs.writeByte( this.recovery_enabled ? 1 : 0); 
 
        outs.writeByte( this.bracing_enabled ? 1 : 0); 
 
    }
 
    public plan_status_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public plan_status_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static robotlocomotion.plan_status_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        robotlocomotion.plan_status_t o = new robotlocomotion.plan_status_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.utime = ins.readLong();
 
        this.execution_status = ins.readByte();
 
        this.last_plan_msg_utime = ins.readLong();
 
        this.last_plan_start_utime = ins.readLong();
 
        this.plan_type = ins.readByte();
 
        this.recovery_enabled = ins.readByte()!=0;
 
        this.bracing_enabled = ins.readByte()!=0;
 
    }
 
    public robotlocomotion.plan_status_t copy()
    {
        robotlocomotion.plan_status_t outobj = new robotlocomotion.plan_status_t();
        outobj.utime = this.utime;
 
        outobj.execution_status = this.execution_status;
 
        outobj.last_plan_msg_utime = this.last_plan_msg_utime;
 
        outobj.last_plan_start_utime = this.last_plan_start_utime;
 
        outobj.plan_type = this.plan_type;
 
        outobj.recovery_enabled = this.recovery_enabled;
 
        outobj.bracing_enabled = this.bracing_enabled;
 
        return outobj;
    }
 
}

