/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package robotlocomotion;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class support_body_t implements lcm.lcm.LCMEncodable
{
    public long utime;
    public int body_id;
    public boolean use_support_surface;
    public boolean override_contact_pts;
    public int num_contact_pts;
    public double contact_pts[][];
    public double support_surface[];
 
    public support_body_t()
    {
        support_surface = new double[4];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x728fbe08984041a7L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(robotlocomotion.support_body_t.class))
            return 0L;
 
        classes.add(robotlocomotion.support_body_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeLong(this.utime); 
 
        outs.writeInt(this.body_id); 
 
        outs.writeByte( this.use_support_surface ? 1 : 0); 
 
        outs.writeByte( this.override_contact_pts ? 1 : 0); 
 
        outs.writeInt(this.num_contact_pts); 
 
        for (int a = 0; a < 3; a++) {
            for (int b = 0; b < this.num_contact_pts; b++) {
                outs.writeDouble(this.contact_pts[a][b]); 
            }
        }
 
        for (int a = 0; a < 4; a++) {
            outs.writeDouble(this.support_surface[a]); 
        }
 
    }
 
    public support_body_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public support_body_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static robotlocomotion.support_body_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        robotlocomotion.support_body_t o = new robotlocomotion.support_body_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.utime = ins.readLong();
 
        this.body_id = ins.readInt();
 
        this.use_support_surface = ins.readByte()!=0;
 
        this.override_contact_pts = ins.readByte()!=0;
 
        this.num_contact_pts = ins.readInt();
 
        this.contact_pts = new double[(int) 3][(int) num_contact_pts];
        for (int a = 0; a < 3; a++) {
            for (int b = 0; b < this.num_contact_pts; b++) {
                this.contact_pts[a][b] = ins.readDouble();
            }
        }
 
        this.support_surface = new double[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.support_surface[a] = ins.readDouble();
        }
 
    }
 
    public robotlocomotion.support_body_t copy()
    {
        robotlocomotion.support_body_t outobj = new robotlocomotion.support_body_t();
        outobj.utime = this.utime;
 
        outobj.body_id = this.body_id;
 
        outobj.use_support_surface = this.use_support_surface;
 
        outobj.override_contact_pts = this.override_contact_pts;
 
        outobj.num_contact_pts = this.num_contact_pts;
 
        outobj.contact_pts = new double[(int) 3][(int) num_contact_pts];
        for (int a = 0; a < 3; a++) {
            if (this.num_contact_pts > 0)
                System.arraycopy(this.contact_pts[a], 0, outobj.contact_pts[a], 0, this.num_contact_pts);        }
 
        outobj.support_surface = new double[(int) 4];
        System.arraycopy(this.support_surface, 0, outobj.support_surface, 0, 4); 
        return outobj;
    }
 
}

