/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package robotlocomotion;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class viewer2_comms_t implements lcm.lcm.LCMEncodable
{
    public long utime;
    public String format;
    public int format_version_major;
    public int format_version_minor;
    public int num_bytes;
    public byte data[];
 
    public viewer2_comms_t()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x69b4701f99e2b45fL;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(robotlocomotion.viewer2_comms_t.class))
            return 0L;
 
        classes.add(robotlocomotion.viewer2_comms_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        char[] __strbuf = null;
        outs.writeLong(this.utime); 
 
        __strbuf = new char[this.format.length()]; this.format.getChars(0, this.format.length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
 
        outs.writeInt(this.format_version_major); 
 
        outs.writeInt(this.format_version_minor); 
 
        outs.writeInt(this.num_bytes); 
 
        if (this.num_bytes > 0)
            outs.write(this.data, 0, num_bytes);
 
    }
 
    public viewer2_comms_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public viewer2_comms_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static robotlocomotion.viewer2_comms_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        robotlocomotion.viewer2_comms_t o = new robotlocomotion.viewer2_comms_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        char[] __strbuf = null;
        this.utime = ins.readLong();
 
        __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.format = new String(__strbuf);
 
        this.format_version_major = ins.readInt();
 
        this.format_version_minor = ins.readInt();
 
        this.num_bytes = ins.readInt();
 
        this.data = new byte[(int) num_bytes];
        ins.readFully(this.data, 0, num_bytes); 
    }
 
    public robotlocomotion.viewer2_comms_t copy()
    {
        robotlocomotion.viewer2_comms_t outobj = new robotlocomotion.viewer2_comms_t();
        outobj.utime = this.utime;
 
        outobj.format = this.format;
 
        outobj.format_version_major = this.format_version_major;
 
        outobj.format_version_minor = this.format_version_minor;
 
        outobj.num_bytes = this.num_bytes;
 
        outobj.data = new byte[(int) num_bytes];
        if (this.num_bytes > 0)
            System.arraycopy(this.data, 0, outobj.data, 0, this.num_bytes); 
        return outobj;
    }
 
}

